static const char* g_BlurY_PS_ENABLE_SHARPNESS_PROFILE_0_KERNEL_RADIUS_2_GL =
"#version 150\n"
"struct vec1 {\n"
"	float x;\n"
"};\n"
"struct uvec1 {\n"
"	uint x;\n"
"};\n"
"struct ivec1 {\n"
"	int x;\n"
"};\n"
"layout(std140) uniform;\n"
"uniform GlobalConstantBuffer {\n"
" 	uvec4 GlobalConstantBuffer_0;\n"
"	vec2 GlobalConstantBuffer_1;\n"
"	vec2 GlobalConstantBuffer_2;\n"
"	vec2 GlobalConstantBuffer_3;\n"
"	vec2 GlobalConstantBuffer_4;\n"
"	float GlobalConstantBuffer_5;\n"
"	float GlobalConstantBuffer_6;\n"
"	float GlobalConstantBuffer_7;\n"
"	float GlobalConstantBuffer_8;\n"
"	float GlobalConstantBuffer_9;\n"
"	float GlobalConstantBuffer_10;\n"
"	float GlobalConstantBuffer_11;\n"
"	int GlobalConstantBuffer_12;\n"
"	float GlobalConstantBuffer_13;\n"
"	float GlobalConstantBuffer_14;\n"
"	float GlobalConstantBuffer_15;\n"
"	float GlobalConstantBuffer_16;\n"
"	float GlobalConstantBuffer_17;\n"
"	float GlobalConstantBuffer_18;\n"
"	float GlobalConstantBuffer_19;\n"
"	float GlobalConstantBuffer_20;\n"
"	vec2 GlobalConstantBuffer_21;\n"
"	float GlobalConstantBuffer_22;\n"
"	float GlobalConstantBuffer_23;\n"
"	float GlobalConstantBuffer_24;\n"
"	float GlobalConstantBuffer_25;\n"
"	int GlobalConstantBuffer_26;\n"
"	vec4 GlobalConstantBuffer_27[4];\n"
"	float GlobalConstantBuffer_28;\n"
"	float GlobalConstantBuffer_29;\n"
"};\n"
"uniform sampler2D g_t0;\n"
"vec4 Input0;\n"
"out  vec4 PixOutput0;\n"
"#define Output0 PixOutput0\n"
"vec4 Temp[3];\n"
"ivec4 Temp_int[3];\n"
"uvec4 Temp_uint[3];\n"
"void main()\n"
"{\n"
"    Input0.xy = gl_FragCoord.xy;\n"
"    Temp[0].xy = vec4(Input0.xyxx + -GlobalConstantBuffer_21.xyxx.xyxx).xy;\n"
"    Temp[1].xz = vec4(vec4(0.000000, 0.000000, -0.000000, 0.000000)).xz;\n"
"    Temp[1].yw = vec4(GlobalConstantBuffer_2.xxxy.wwww).yw;\n"
"    Temp[0].zw = vec4(Temp[0].xxxy * GlobalConstantBuffer_2.xxxy.zzzw + Temp[1].xxxy).zw;\n"
"    Temp[0].zw = (texture(g_t0, Temp[0].zw).zwxy).zw;\n"
"    Temp[2].xy = vec4(Temp[0].xyxx * GlobalConstantBuffer_2.xxxy.zwzz).xy;\n"
"    Temp[0].xy = vec4(Temp[0].xyxx * GlobalConstantBuffer_2.xxxy.zwzz + -Temp[1].xyxx).xy;\n"
"    Temp[1] = vec4(vec4(2.000000, 2.000000, 2.000000, -2.000000) * Temp[1] + Temp[2].xyxy);\n"
"    Temp[2].xy = (texture(g_t0, Temp[2].xy)).xy;\n"
"    Temp[0].xy = (texture(g_t0, Temp[0].xy)).xy;\n"
"    Temp[2].z = Temp[0].w + -Temp[2].y;\n"
"    Temp[0].w = Temp[0].w + -Temp[2].z;\n"
"    Temp[2].w = -Temp[2].y * GlobalConstantBuffer_16;\n"
"    Temp[0].w = Temp[0].w * GlobalConstantBuffer_16 + Temp[2].w;\n"
"    Temp[0].w = -Temp[0].w * Temp[0].w + -0.222222;\n"
"    Temp[0].w = vec4(exp2(Temp[0].w)).w;\n"
"    Temp[0].z = Temp[0].w * Temp[0].z + Temp[2].x;\n"
"    Temp[0].w = Temp[0].w + 1.000000;\n"
"    Temp[2].x = -Temp[2].y + Temp[0].y;\n"
"    Temp[1].xy = (texture(g_t0, Temp[1].xy)).xy;\n"
"    Temp[1].zw = (texture(g_t0, Temp[1].zw).zwxy).zw;\n"
"    Temp[1].y = -Temp[2].z * 2.000000 + Temp[1].y;\n"
"    Temp[1].y = Temp[1].y * GlobalConstantBuffer_16 + Temp[2].w;\n"
"    Temp[1].y = -Temp[1].y * Temp[1].y + -0.888889;\n"
"    Temp[1].y = vec4(exp2(Temp[1].y)).y;\n"
"    Temp[0].z = Temp[1].y * Temp[1].x + Temp[0].z;\n"
"    Temp[0].w = Temp[0].w + Temp[1].y;\n"
"    Temp[0].y = Temp[0].y + -Temp[2].x;\n"
"    Temp[1].x = -Temp[2].x * 2.000000 + Temp[1].w;\n"
"    Temp[1].x = Temp[1].x * GlobalConstantBuffer_16 + Temp[2].w;\n"
"    Temp[0].y = Temp[0].y * GlobalConstantBuffer_16 + Temp[2].w;\n"
"    Temp[0].y = -Temp[0].y * Temp[0].y + -0.222222;\n"
"    Temp[0].y = vec4(exp2(Temp[0].y)).y;\n"
"    Temp[1].x = -Temp[1].x * Temp[1].x + -0.888889;\n"
"    Temp[1].x = vec4(exp2(Temp[1].x)).x;\n"
"    Temp[0].x = Temp[0].y * Temp[0].x + Temp[0].z;\n"
"    Temp[0].y = Temp[0].y + Temp[0].w;\n"
"    Temp[0].y = Temp[1].x + Temp[0].y;\n"
"    Temp[0].x = Temp[1].x * Temp[1].z + Temp[0].x;\n"
"    Temp[0].x = Temp[0].x / Temp[0].y;\n"
"    Temp[0].x = clamp(Temp[0].x, 0.0, 1.0);\n"
"    Temp[0].x = vec4(log2(Temp[0].x)).x;\n"
"    Temp[0].x = Temp[0].x * GlobalConstantBuffer_11;\n"
"    Output0 = vec4(exp2(Temp[0].xxxx));\n"
"    return;\n"
"}\n"
;
static const char* g_BlurY_PS_ENABLE_SHARPNESS_PROFILE_0_KERNEL_RADIUS_4_GL =
"#version 150\n"
"struct vec1 {\n"
"	float x;\n"
"};\n"
"struct uvec1 {\n"
"	uint x;\n"
"};\n"
"struct ivec1 {\n"
"	int x;\n"
"};\n"
"layout(std140) uniform;\n"
"uniform GlobalConstantBuffer {\n"
" 	uvec4 GlobalConstantBuffer_0;\n"
"	vec2 GlobalConstantBuffer_1;\n"
"	vec2 GlobalConstantBuffer_2;\n"
"	vec2 GlobalConstantBuffer_3;\n"
"	vec2 GlobalConstantBuffer_4;\n"
"	float GlobalConstantBuffer_5;\n"
"	float GlobalConstantBuffer_6;\n"
"	float GlobalConstantBuffer_7;\n"
"	float GlobalConstantBuffer_8;\n"
"	float GlobalConstantBuffer_9;\n"
"	float GlobalConstantBuffer_10;\n"
"	float GlobalConstantBuffer_11;\n"
"	int GlobalConstantBuffer_12;\n"
"	float GlobalConstantBuffer_13;\n"
"	float GlobalConstantBuffer_14;\n"
"	float GlobalConstantBuffer_15;\n"
"	float GlobalConstantBuffer_16;\n"
"	float GlobalConstantBuffer_17;\n"
"	float GlobalConstantBuffer_18;\n"
"	float GlobalConstantBuffer_19;\n"
"	float GlobalConstantBuffer_20;\n"
"	vec2 GlobalConstantBuffer_21;\n"
"	float GlobalConstantBuffer_22;\n"
"	float GlobalConstantBuffer_23;\n"
"	float GlobalConstantBuffer_24;\n"
"	float GlobalConstantBuffer_25;\n"
"	int GlobalConstantBuffer_26;\n"
"	vec4 GlobalConstantBuffer_27[4];\n"
"	float GlobalConstantBuffer_28;\n"
"	float GlobalConstantBuffer_29;\n"
"};\n"
"uniform sampler2D g_t0;\n"
"uniform sampler2D g_t1;\n"
"vec4 Input0;\n"
"out  vec4 PixOutput0;\n"
"#define Output0 PixOutput0\n"
"vec4 Temp[5];\n"
"ivec4 Temp_int[5];\n"
"uvec4 Temp_uint[5];\n"
"void main()\n"
"{\n"
"    Input0.xy = gl_FragCoord.xy;\n"
"    Temp[0].xy = vec4(Input0.xyxx + -GlobalConstantBuffer_21.xyxx.xyxx).xy;\n"
"    Temp[1].xz = vec4(vec4(0.000000, 0.000000, -0.000000, 0.000000)).xz;\n"
"    Temp[1].yw = vec4(GlobalConstantBuffer_2.xxxy.wwww).yw;\n"
"    Temp[0].zw = vec4(Temp[0].xxxy * GlobalConstantBuffer_2.xxxy.zzzw + Temp[1].xxxy).zw;\n"
"    Temp[0].zw = (texture(g_t0, Temp[0].zw).zwxy).zw;\n"
"    Temp[2].xy = vec4(Temp[0].xyxx * GlobalConstantBuffer_2.xxxy.zwzz).xy;\n"
"    Temp[0].xy = vec4(Temp[0].xyxx * GlobalConstantBuffer_2.xxxy.zwzz + -Temp[1].xyxx).xy;\n"
"    Temp[0].xy = (texture(g_t0, Temp[0].xy)).xy;\n"
"    Temp[2].zw = (texture(g_t0, Temp[2].xy).zwxy).zw;\n"
"    Temp[3].x = Temp[0].w + -Temp[2].w;\n"
"    Temp[0].w = Temp[0].w + -Temp[3].x;\n"
"    Temp[3].y = -Temp[2].w * GlobalConstantBuffer_16;\n"
"    Temp[0].w = Temp[0].w * GlobalConstantBuffer_16 + Temp[3].y;\n"
"    Temp[0].w = -Temp[0].w * Temp[0].w + -0.080000;\n"
"    Temp[0].w = vec4(exp2(Temp[0].w)).w;\n"
"    Temp[0].z = Temp[0].w * Temp[0].z + Temp[2].z;\n"
"    Temp[0].w = Temp[0].w + 1.000000;\n"
"    Temp[2].z = Temp[0].y + -Temp[2].w;\n"
"    Temp[4] = vec4(vec4(2.000000, 2.000000, 3.500000, 3.500000) * Temp[1].xyxy + Temp[2].xyxy);\n"
"    Temp[1] = vec4(vec4(2.000000, -2.000000, 3.500000, -3.500000) * Temp[1].zwzw + Temp[2].xyxy);\n"
"    Temp[2].xy = (texture(g_t0, Temp[4].xy)).xy;\n"
"    Temp[3].zw = (texture(g_t1, Temp[4].zw).zwxy).zw;\n"
"    Temp[2].y = -Temp[3].x * 2.000000 + Temp[2].y;\n"
"    Temp[2].w = -Temp[3].x * 3.000000 + Temp[3].w;\n"
"    Temp[2].w = Temp[2].w * GlobalConstantBuffer_16 + Temp[3].y;\n"
"    Temp[2].w = -Temp[2].w * Temp[2].w + -0.720000;\n"
"    Temp[2].w = vec4(exp2(Temp[2].w)).w;\n"
"    Temp[2].y = Temp[2].y * GlobalConstantBuffer_16 + Temp[3].y;\n"
"    Temp[2].y = -Temp[2].y * Temp[2].y + -0.320000;\n"
"    Temp[2].y = vec4(exp2(Temp[2].y)).y;\n"
"    Temp[0].z = Temp[2].y * Temp[2].x + Temp[0].z;\n"
"    Temp[0].w = Temp[0].w + Temp[2].y;\n"
"    Temp[0].w = Temp[2].w + Temp[0].w;\n"
"    Temp[0].z = Temp[2].w * Temp[3].z + Temp[0].z;\n"
"    Temp[0].y = Temp[0].y + -Temp[2].z;\n"
"    Temp[0].y = Temp[0].y * GlobalConstantBuffer_16 + Temp[3].y;\n"
"    Temp[0].y = -Temp[0].y * Temp[0].y + -0.080000;\n"
"    Temp[0].y = vec4(exp2(Temp[0].y)).y;\n"
"    Temp[0].x = Temp[0].y * Temp[0].x + Temp[0].z;\n"
"    Temp[0].y = Temp[0].y + Temp[0].w;\n"
"    Temp[0].zw = (texture(g_t0, Temp[1].xy).zwxy).zw;\n"
"    Temp[1].xy = (texture(g_t1, Temp[1].zw)).xy;\n"
"    Temp[0].w = -Temp[2].z * 2.000000 + Temp[0].w;\n"
"    Temp[1].y = -Temp[2].z * 3.000000 + Temp[1].y;\n"
"    Temp[1].y = Temp[1].y * GlobalConstantBuffer_16 + Temp[3].y;\n"
"    Temp[0].w = Temp[0].w * GlobalConstantBuffer_16 + Temp[3].y;\n"
"    Temp[0].w = -Temp[0].w * Temp[0].w + -0.320000;\n"
"    Temp[0].w = vec4(exp2(Temp[0].w)).w;\n"
"    Temp[1].y = -Temp[1].y * Temp[1].y + -0.720000;\n"
"    Temp[1].y = vec4(exp2(Temp[1].y)).y;\n"
"    Temp[0].x = Temp[0].w * Temp[0].z + Temp[0].x;\n"
"    Temp[0].y = Temp[0].w + Temp[0].y;\n"
"    Temp[0].y = Temp[1].y + Temp[0].y;\n"
"    Temp[0].x = Temp[1].y * Temp[1].x + Temp[0].x;\n"
"    Temp[0].x = Temp[0].x / Temp[0].y;\n"
"    Temp[0].x = clamp(Temp[0].x, 0.0, 1.0);\n"
"    Temp[0].x = vec4(log2(Temp[0].x)).x;\n"
"    Temp[0].x = Temp[0].x * GlobalConstantBuffer_11;\n"
"    Output0 = vec4(exp2(Temp[0].xxxx));\n"
"    return;\n"
"}\n"
;
static const char* g_BlurY_PS_ENABLE_SHARPNESS_PROFILE_1_KERNEL_RADIUS_2_GL =
"#version 150\n"
"struct vec1 {\n"
"	float x;\n"
"};\n"
"struct uvec1 {\n"
"	uint x;\n"
"};\n"
"struct ivec1 {\n"
"	int x;\n"
"};\n"
"layout(std140) uniform;\n"
"uniform GlobalConstantBuffer {\n"
" 	uvec4 GlobalConstantBuffer_0;\n"
"	vec2 GlobalConstantBuffer_1;\n"
"	vec2 GlobalConstantBuffer_2;\n"
"	vec2 GlobalConstantBuffer_3;\n"
"	vec2 GlobalConstantBuffer_4;\n"
"	float GlobalConstantBuffer_5;\n"
"	float GlobalConstantBuffer_6;\n"
"	float GlobalConstantBuffer_7;\n"
"	float GlobalConstantBuffer_8;\n"
"	float GlobalConstantBuffer_9;\n"
"	float GlobalConstantBuffer_10;\n"
"	float GlobalConstantBuffer_11;\n"
"	int GlobalConstantBuffer_12;\n"
"	float GlobalConstantBuffer_13;\n"
"	float GlobalConstantBuffer_14;\n"
"	float GlobalConstantBuffer_15;\n"
"	float GlobalConstantBuffer_16;\n"
"	float GlobalConstantBuffer_17;\n"
"	float GlobalConstantBuffer_18;\n"
"	float GlobalConstantBuffer_19;\n"
"	float GlobalConstantBuffer_20;\n"
"	vec2 GlobalConstantBuffer_21;\n"
"	float GlobalConstantBuffer_22;\n"
"	float GlobalConstantBuffer_23;\n"
"	float GlobalConstantBuffer_24;\n"
"	float GlobalConstantBuffer_25;\n"
"	int GlobalConstantBuffer_26;\n"
"	vec4 GlobalConstantBuffer_27[4];\n"
"	float GlobalConstantBuffer_28;\n"
"	float GlobalConstantBuffer_29;\n"
"};\n"
"uniform sampler2D g_t0;\n"
"vec4 Input0;\n"
"out  vec4 PixOutput0;\n"
"#define Output0 PixOutput0\n"
"vec4 Temp[4];\n"
"ivec4 Temp_int[4];\n"
"uvec4 Temp_uint[4];\n"
"void main()\n"
"{\n"
"    Input0.xy = gl_FragCoord.xy;\n"
"    Temp[0].xy = vec4(Input0.xyxx + -GlobalConstantBuffer_21.xyxx.xyxx).xy;\n"
"    Temp[1].xz = vec4(vec4(0.000000, 0.000000, -0.000000, 0.000000)).xz;\n"
"    Temp[1].yw = vec4(GlobalConstantBuffer_2.xxxy.wwww).yw;\n"
"    Temp[0].zw = vec4(Temp[0].xxxy * GlobalConstantBuffer_2.xxxy.zzzw + Temp[1].xxxy).zw;\n"
"    Temp[0].zw = (texture(g_t0, Temp[0].zw).zwxy).zw;\n"
"    Temp[2].xy = vec4(Temp[0].xyxx * GlobalConstantBuffer_2.xxxy.zwzz).xy;\n"
"    Temp[0].xy = vec4(Temp[0].xyxx * GlobalConstantBuffer_2.xxxy.zwzz + -Temp[1].xyxx).xy;\n"
"    Temp[1] = vec4(vec4(2.000000, 2.000000, 2.000000, -2.000000) * Temp[1] + Temp[2].xyxy);\n"
"    Temp[2].xy = (texture(g_t0, Temp[2].xy)).xy;\n"
"    Temp[0].xy = (texture(g_t0, Temp[0].xy)).xy;\n"
"    Temp[2].z = Temp[0].w + -Temp[2].y;\n"
"    Temp[0].w = Temp[0].w + -Temp[2].z;\n"
"    Temp[2].w = Temp[2].y + -GlobalConstantBuffer_13;\n"
"    Temp[3].xy = vec4(-GlobalConstantBuffer_13 + GlobalConstantBuffer_14).xy;\n"
"    Temp[2].w = Temp[2].w / Temp[3].x;\n"
"    Temp[2].w = clamp(Temp[2].w, 0.0, 1.0);\n"
"    Temp[2].w = Temp[2].w * Temp[3].y + GlobalConstantBuffer_15;\n"
"    Temp[3].x = Temp[2].w * -Temp[2].y;\n"
"    Temp[0].w = Temp[0].w * Temp[2].w + Temp[3].x;\n"
"    Temp[0].w = -Temp[0].w * Temp[0].w + -0.222222;\n"
"    Temp[0].w = vec4(exp2(Temp[0].w)).w;\n"
"    Temp[0].z = Temp[0].w * Temp[0].z + Temp[2].x;\n"
"    Temp[0].w = Temp[0].w + 1.000000;\n"
"    Temp[2].x = -Temp[2].y + Temp[0].y;\n"
"    Temp[1].xy = (texture(g_t0, Temp[1].xy)).xy;\n"
"    Temp[1].zw = (texture(g_t0, Temp[1].zw).zwxy).zw;\n"
"    Temp[1].y = -Temp[2].z * 2.000000 + Temp[1].y;\n"
"    Temp[1].y = Temp[1].y * Temp[2].w + Temp[3].x;\n"
"    Temp[1].y = -Temp[1].y * Temp[1].y + -0.888889;\n"
"    Temp[1].y = vec4(exp2(Temp[1].y)).y;\n"
"    Temp[0].z = Temp[1].y * Temp[1].x + Temp[0].z;\n"
"    Temp[0].w = Temp[0].w + Temp[1].y;\n"
"    Temp[0].y = Temp[0].y + -Temp[2].x;\n"
"    Temp[1].x = -Temp[2].x * 2.000000 + Temp[1].w;\n"
"    Temp[1].x = Temp[1].x * Temp[2].w + Temp[3].x;\n"
"    Temp[0].y = Temp[0].y * Temp[2].w + Temp[3].x;\n"
"    Temp[0].y = -Temp[0].y * Temp[0].y + -0.222222;\n"
"    Temp[0].y = vec4(exp2(Temp[0].y)).y;\n"
"    Temp[1].x = -Temp[1].x * Temp[1].x + -0.888889;\n"
"    Temp[1].x = vec4(exp2(Temp[1].x)).x;\n"
"    Temp[0].x = Temp[0].y * Temp[0].x + Temp[0].z;\n"
"    Temp[0].y = Temp[0].y + Temp[0].w;\n"
"    Temp[0].y = Temp[1].x + Temp[0].y;\n"
"    Temp[0].x = Temp[1].x * Temp[1].z + Temp[0].x;\n"
"    Temp[0].x = Temp[0].x / Temp[0].y;\n"
"    Temp[0].x = clamp(Temp[0].x, 0.0, 1.0);\n"
"    Temp[0].x = vec4(log2(Temp[0].x)).x;\n"
"    Temp[0].x = Temp[0].x * GlobalConstantBuffer_11;\n"
"    Output0 = vec4(exp2(Temp[0].xxxx));\n"
"    return;\n"
"}\n"
;
static const char* g_BlurY_PS_ENABLE_SHARPNESS_PROFILE_1_KERNEL_RADIUS_4_GL =
"#version 150\n"
"struct vec1 {\n"
"	float x;\n"
"};\n"
"struct uvec1 {\n"
"	uint x;\n"
"};\n"
"struct ivec1 {\n"
"	int x;\n"
"};\n"
"layout(std140) uniform;\n"
"uniform GlobalConstantBuffer {\n"
" 	uvec4 GlobalConstantBuffer_0;\n"
"	vec2 GlobalConstantBuffer_1;\n"
"	vec2 GlobalConstantBuffer_2;\n"
"	vec2 GlobalConstantBuffer_3;\n"
"	vec2 GlobalConstantBuffer_4;\n"
"	float GlobalConstantBuffer_5;\n"
"	float GlobalConstantBuffer_6;\n"
"	float GlobalConstantBuffer_7;\n"
"	float GlobalConstantBuffer_8;\n"
"	float GlobalConstantBuffer_9;\n"
"	float GlobalConstantBuffer_10;\n"
"	float GlobalConstantBuffer_11;\n"
"	int GlobalConstantBuffer_12;\n"
"	float GlobalConstantBuffer_13;\n"
"	float GlobalConstantBuffer_14;\n"
"	float GlobalConstantBuffer_15;\n"
"	float GlobalConstantBuffer_16;\n"
"	float GlobalConstantBuffer_17;\n"
"	float GlobalConstantBuffer_18;\n"
"	float GlobalConstantBuffer_19;\n"
"	float GlobalConstantBuffer_20;\n"
"	vec2 GlobalConstantBuffer_21;\n"
"	float GlobalConstantBuffer_22;\n"
"	float GlobalConstantBuffer_23;\n"
"	float GlobalConstantBuffer_24;\n"
"	float GlobalConstantBuffer_25;\n"
"	int GlobalConstantBuffer_26;\n"
"	vec4 GlobalConstantBuffer_27[4];\n"
"	float GlobalConstantBuffer_28;\n"
"	float GlobalConstantBuffer_29;\n"
"};\n"
"uniform sampler2D g_t0;\n"
"uniform sampler2D g_t1;\n"
"vec4 Input0;\n"
"out  vec4 PixOutput0;\n"
"#define Output0 PixOutput0\n"
"vec4 Temp[5];\n"
"ivec4 Temp_int[5];\n"
"uvec4 Temp_uint[5];\n"
"void main()\n"
"{\n"
"    Input0.xy = gl_FragCoord.xy;\n"
"    Temp[0].xy = vec4(Input0.xyxx + -GlobalConstantBuffer_21.xyxx.xyxx).xy;\n"
"    Temp[1].xz = vec4(vec4(0.000000, 0.000000, -0.000000, 0.000000)).xz;\n"
"    Temp[1].yw = vec4(GlobalConstantBuffer_2.xxxy.wwww).yw;\n"
"    Temp[0].zw = vec4(Temp[0].xxxy * GlobalConstantBuffer_2.xxxy.zzzw + Temp[1].xxxy).zw;\n"
"    Temp[0].zw = (texture(g_t0, Temp[0].zw).zwxy).zw;\n"
"    Temp[2].xy = vec4(Temp[0].xyxx * GlobalConstantBuffer_2.xxxy.zwzz).xy;\n"
"    Temp[0].xy = vec4(Temp[0].xyxx * GlobalConstantBuffer_2.xxxy.zwzz + -Temp[1].xyxx).xy;\n"
"    Temp[0].xy = (texture(g_t0, Temp[0].xy)).xy;\n"
"    Temp[2].zw = (texture(g_t0, Temp[2].xy).zwxy).zw;\n"
"    Temp[3].x = Temp[0].w + -Temp[2].w;\n"
"    Temp[0].w = Temp[0].w + -Temp[3].x;\n"
"    Temp[3].y = Temp[2].w + -GlobalConstantBuffer_13;\n"
"    Temp[3].zw = vec4(-GlobalConstantBuffer_13 + GlobalConstantBuffer_14).zw;\n"
"    Temp[3].y = Temp[3].y / Temp[3].z;\n"
"    Temp[3].y = clamp(Temp[3].y, 0.0, 1.0);\n"
"    Temp[3].y = Temp[3].y * Temp[3].w + GlobalConstantBuffer_15;\n"
"    Temp[3].z = -Temp[2].w * Temp[3].y;\n"
"    Temp[0].w = Temp[0].w * Temp[3].y + Temp[3].z;\n"
"    Temp[0].w = -Temp[0].w * Temp[0].w + -0.080000;\n"
"    Temp[0].w = vec4(exp2(Temp[0].w)).w;\n"
"    Temp[0].z = Temp[0].w * Temp[0].z + Temp[2].z;\n"
"    Temp[0].w = Temp[0].w + 1.000000;\n"
"    Temp[2].z = Temp[0].y + -Temp[2].w;\n"
"    Temp[4] = vec4(vec4(2.000000, 2.000000, 3.500000, 3.500000) * Temp[1].xyxy + Temp[2].xyxy);\n"
"    Temp[1] = vec4(vec4(2.000000, -2.000000, 3.500000, -3.500000) * Temp[1].zwzw + Temp[2].xyxy);\n"
"    Temp[2].xy = (texture(g_t0, Temp[4].xy)).xy;\n"
"    Temp[4].xy = (texture(g_t1, Temp[4].zw)).xy;\n"
"    Temp[2].y = -Temp[3].x * 2.000000 + Temp[2].y;\n"
"    Temp[2].w = -Temp[3].x * 3.000000 + Temp[4].y;\n"
"    Temp[2].w = Temp[2].w * Temp[3].y + Temp[3].z;\n"
"    Temp[2].w = -Temp[2].w * Temp[2].w + -0.720000;\n"
"    Temp[2].w = vec4(exp2(Temp[2].w)).w;\n"
"    Temp[2].y = Temp[2].y * Temp[3].y + Temp[3].z;\n"
"    Temp[2].y = -Temp[2].y * Temp[2].y + -0.320000;\n"
"    Temp[2].y = vec4(exp2(Temp[2].y)).y;\n"
"    Temp[0].z = Temp[2].y * Temp[2].x + Temp[0].z;\n"
"    Temp[0].w = Temp[0].w + Temp[2].y;\n"
"    Temp[0].w = Temp[2].w + Temp[0].w;\n"
"    Temp[0].z = Temp[2].w * Temp[4].x + Temp[0].z;\n"
"    Temp[0].y = Temp[0].y + -Temp[2].z;\n"
"    Temp[0].y = Temp[0].y * Temp[3].y + Temp[3].z;\n"
"    Temp[0].y = -Temp[0].y * Temp[0].y + -0.080000;\n"
"    Temp[0].y = vec4(exp2(Temp[0].y)).y;\n"
"    Temp[0].x = Temp[0].y * Temp[0].x + Temp[0].z;\n"
"    Temp[0].y = Temp[0].y + Temp[0].w;\n"
"    Temp[0].zw = (texture(g_t0, Temp[1].xy).zwxy).zw;\n"
"    Temp[1].xy = (texture(g_t1, Temp[1].zw)).xy;\n"
"    Temp[0].w = -Temp[2].z * 2.000000 + Temp[0].w;\n"
"    Temp[1].y = -Temp[2].z * 3.000000 + Temp[1].y;\n"
"    Temp[1].y = Temp[1].y * Temp[3].y + Temp[3].z;\n"
"    Temp[0].w = Temp[0].w * Temp[3].y + Temp[3].z;\n"
"    Temp[0].w = -Temp[0].w * Temp[0].w + -0.320000;\n"
"    Temp[0].w = vec4(exp2(Temp[0].w)).w;\n"
"    Temp[1].y = -Temp[1].y * Temp[1].y + -0.720000;\n"
"    Temp[1].y = vec4(exp2(Temp[1].y)).y;\n"
"    Temp[0].x = Temp[0].w * Temp[0].z + Temp[0].x;\n"
"    Temp[0].y = Temp[0].w + Temp[0].y;\n"
"    Temp[0].y = Temp[1].y + Temp[0].y;\n"
"    Temp[0].x = Temp[1].y * Temp[1].x + Temp[0].x;\n"
"    Temp[0].x = Temp[0].x / Temp[0].y;\n"
"    Temp[0].x = clamp(Temp[0].x, 0.0, 1.0);\n"
"    Temp[0].x = vec4(log2(Temp[0].x)).x;\n"
"    Temp[0].x = Temp[0].x * GlobalConstantBuffer_11;\n"
"    Output0 = vec4(exp2(Temp[0].xxxx));\n"
"    return;\n"
"}\n"
;

namespace Generated
{
    void BlurY_PS::Create(DevicePointer Device)
    {
        m_Shader[ShaderPermutations::ENABLE_SHARPNESS_PROFILE_0][ShaderPermutations::KERNEL_RADIUS_2].Create(Device, g_BlurY_PS_ENABLE_SHARPNESS_PROFILE_0_KERNEL_RADIUS_2_GL, sizeof(g_BlurY_PS_ENABLE_SHARPNESS_PROFILE_0_KERNEL_RADIUS_2_GL));
        m_Shader[ShaderPermutations::ENABLE_SHARPNESS_PROFILE_0][ShaderPermutations::KERNEL_RADIUS_4].Create(Device, g_BlurY_PS_ENABLE_SHARPNESS_PROFILE_0_KERNEL_RADIUS_4_GL, sizeof(g_BlurY_PS_ENABLE_SHARPNESS_PROFILE_0_KERNEL_RADIUS_4_GL));
        m_Shader[ShaderPermutations::ENABLE_SHARPNESS_PROFILE_1][ShaderPermutations::KERNEL_RADIUS_2].Create(Device, g_BlurY_PS_ENABLE_SHARPNESS_PROFILE_1_KERNEL_RADIUS_2_GL, sizeof(g_BlurY_PS_ENABLE_SHARPNESS_PROFILE_1_KERNEL_RADIUS_2_GL));
        m_Shader[ShaderPermutations::ENABLE_SHARPNESS_PROFILE_1][ShaderPermutations::KERNEL_RADIUS_4].Create(Device, g_BlurY_PS_ENABLE_SHARPNESS_PROFILE_1_KERNEL_RADIUS_4_GL, sizeof(g_BlurY_PS_ENABLE_SHARPNESS_PROFILE_1_KERNEL_RADIUS_4_GL));
    }

    void BlurY_PS::Release(DevicePointer Device)
    {
        m_Shader[ShaderPermutations::ENABLE_SHARPNESS_PROFILE_0][ShaderPermutations::KERNEL_RADIUS_2].Release(Device);
        m_Shader[ShaderPermutations::ENABLE_SHARPNESS_PROFILE_0][ShaderPermutations::KERNEL_RADIUS_4].Release(Device);
        m_Shader[ShaderPermutations::ENABLE_SHARPNESS_PROFILE_1][ShaderPermutations::KERNEL_RADIUS_2].Release(Device);
        m_Shader[ShaderPermutations::ENABLE_SHARPNESS_PROFILE_1][ShaderPermutations::KERNEL_RADIUS_4].Release(Device);
    }
}
